Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> unique= new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(unique.contains(nums[i])){
                return true;
            }
            unique.add(nums[i]);
        }
        return false;

        
    }
}

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> prevMap=new HashMap<>();

        for(int i=0;i<nums.length;i++){
            int num=nums[i];
            int diff=target-num;

            if(prevMap.containsKey(diff)){
                return new int[] {prevMap.get(diff),i};
            }
            prevMap.put(num,i);
        }
        return new int[] {};
        
    }
}

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:

Input: strs = [""]
Output: [[""]]

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String,List<String>> map = new HashMap<>();

        for(String word:strs){
            char[] chars= word.toCharArray();
            Arrays.sort(chars);
            String SortedChar = new String(chars);

            if(!map.containsKey(SortedChar)){
                map.put(SortedChar,new ArrayList<>());
            }
            map.get(SortedChar).add(word);
        }
        return new ArrayList<>(map.values());
        
    }
}

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.

class Solution {
    public boolean isPalindrome(String s) {
        int i=0;
        int j=s.length()-1;
        while(i<j){
            Character start=s.charAt(i);
            Character end=s.charAt(j);
            if(!Character.isLetterOrDigit(start)){
                i++;
                continue;
            }
            if(!Character.isLetterOrDigit(end)){
                j--;
                continue;
            }
            if(Character.toLowerCase(start)!=Character.toLowerCase(end)){
                return false;
            }
            i++;
            j--;
        }
        return true;
        
    }
}

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()) return false;
        
        int[] char_count = new int[26];
        for(int i=0;i<s.length();i++){
            char_count[s.charAt(i)-'a']++;
            char_count[t.charAt(i)-'a']--;
        }
        for(int n:char_count) if(n!=0) return false;
        return true;
    }
    
}
